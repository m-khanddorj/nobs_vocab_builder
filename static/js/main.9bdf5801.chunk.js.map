{"version":3,"sources":["Flashcard.js","App.js","reportWebVitals.js","index.js"],"names":["Flashcard","_ref","word","translation","pronunciation","isFlipped","handleFlip","backgroundColor","React","createElement","ReactCardFlip","flipDirection","Card","onClick","className","style","cursor","CardContent","Typography","variant","languages","difficulties","App","flashcards","setFlashcards","useState","selectedLanguage","setSelectedLanguage","selectedDifficulty","setSelectedDifficulty","currentWordIndex","setCurrentWordIndex","currentRoundCount","setCurrentRoundCount","setIsFlipped","unfamiliarWords","setUnfamiliarWords","unfamiliarIndex","setUnfamiliarIndex","snackbarOpen","setSnackbarOpen","useEffect","shuffledFlashcards","array","i","length","j","Math","floor","random","shuffleArray","flashcardsData","filteredFlashcards","filter","card","translation_language","level","handleNext","knowWord","reviewRound","displayedWord","nextReviewRound","slice","includes","Container","FormControl","InputLabel","Select","value","onChange","event","target","label","map","language","MenuItem","key","difficulty","Object","assign","Button","color","disabled","CloseIcon","navigator","clipboard","writeText","then","setTimeout","catch","err","console","error","handleCopy","ContentCopyIcon","CheckIcon","Snackbar","open","autoHideDuration","onClose","Alert","severity","sx","width","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.9bdf5801.chunk.js","sourcesContent":["// src/Flashcard.js\nimport React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport ReactCardFlip from 'react-card-flip';\nimport './index.css';  // Import the CSS file\n\nconst Flashcard = ({ word, translation, pronunciation, isFlipped, handleFlip, backgroundColor }) => {\n    return (\n        <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n            <Card onClick={handleFlip} className=\"flashcard\" style={{ cursor: 'pointer', backgroundColor }}>\n                <CardContent className=\"flashcard-content\">\n                    <Typography variant=\"h5\">{word}</Typography>\n                </CardContent>\n            </Card>\n            <Card onClick={handleFlip} className=\"flashcard\" style={{ cursor: 'pointer', backgroundColor }}>\n                <CardContent className=\"flashcard-content\">\n                    <Typography variant=\"h5\">{translation}</Typography>\n                    <Typography variant=\"body1\">{pronunciation}</Typography>\n                </CardContent>\n            </Card>\n        </ReactCardFlip>\n    );\n};\n\nexport default Flashcard;","\n\nimport React, { useState, useEffect } from 'react';\nimport Flashcard from './Flashcard';\nimport { Container, FormControl, InputLabel, Select, MenuItem, Button,Snackbar, Alert  } from '@mui/material';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport flashcardsData from './flashcards.json';\nimport './App.css';  // Import the CSS file\n\nconst shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\nconst languages = ['English','Mongolian'];\nconst difficulties = ['All', 'N1', 'N2', 'N3', 'N4', 'N5'];\nconst App = () => {\n    const [flashcards, setFlashcards] = useState([]);\n    const [selectedLanguage, setSelectedLanguage] = useState('English');\n    const [selectedDifficulty, setSelectedDifficulty] = useState('All');\n    const [currentWordIndex, setCurrentWordIndex] = useState(0);\n    const [currentRoundCount, setCurrentRoundCount] = useState(0);\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [unfamiliarWords, setUnfamiliarWords] = useState([]);\n    const [unfamiliarIndex, setUnfamiliarIndex] = useState([]);\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    useEffect(() => {\n        const shuffledFlashcards = shuffleArray([...flashcardsData]);\n        setFlashcards(shuffledFlashcards);\n    }, []);\n\n    const handleLanguageChange = (event) => {\n        setSelectedLanguage(event.target.value);\n        setCurrentWordIndex(0);\n        setCurrentRoundCount(0);\n        setIsFlipped(false);\n    };\n\n    const handleDifficultyChange = (event) => {\n        setSelectedDifficulty(event.target.value);\n        setCurrentWordIndex(0);\n        setCurrentRoundCount(0);\n        setIsFlipped(false);\n    };\n\n\n    const handleCopy = (word) => {\n        navigator.clipboard.writeText(word)\n        .then(() => {\n            setSnackbarOpen(true);\n            setTimeout(() => setSnackbarOpen(false), 2000);\n        })\n        .catch(err => {\n            console.error('Failed to copy: ', err);\n        });\n    };\n\n    const filteredFlashcards = flashcards.filter((card) => {\n        return (selectedLanguage === 'All' || card.translation_language === selectedLanguage) &&\n               (selectedDifficulty === 'All' || card.level === selectedDifficulty);\n    });\n\n    const handleNext = (knowWord,reviewRound,displayedWord) => {\n        if (!knowWord) {\n            const nextReviewRound = currentRoundCount + 5;\n            setUnfamiliarWords([...unfamiliarWords, displayedWord]);\n            setUnfamiliarIndex([...unfamiliarIndex, nextReviewRound]);\n        }\n\n        if (!reviewRound){\n            const nextIndex = currentWordIndex + 1;\n            setCurrentWordIndex(nextIndex % filteredFlashcards.length);\n        }\n        else{\n            setUnfamiliarWords([...unfamiliarWords.slice(1)]);\n            setUnfamiliarIndex([...unfamiliarIndex.slice(1)]);\n        }\n        setIsFlipped(false);\n        setCurrentRoundCount(currentRoundCount+1)\n    };\n\n    const handleFlip = () => {\n        setIsFlipped(!isFlipped);\n    };\n\n    const reviewRound = unfamiliarIndex.includes(currentRoundCount);\n    const backgroundColor = reviewRound ? '#f8d7da' : '#ffffff';\n    const word = reviewRound ? unfamiliarWords[0]:filteredFlashcards[currentWordIndex];\n    return (\n        <Container>\n            <div className=\"dropdown-container\">\n                <FormControl variant=\"outlined\" className=\"dropdown\">\n                    <InputLabel>Language</InputLabel>\n                    <Select value={selectedLanguage} onChange={handleLanguageChange} label=\"language\">\n                        {languages.map((language) => (\n                            <MenuItem key={language} value={language}>{language}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n\n                <FormControl variant=\"outlined\" className=\"dropdown\">\n                    <InputLabel>Difficulty</InputLabel>\n                    <Select value={selectedDifficulty} onChange={handleDifficultyChange} label=\"Difficulty\">\n                        {difficulties.map((difficulty) => (\n                            <MenuItem key={difficulty} value={difficulty}>{difficulty}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n\n            {filteredFlashcards.length > 0 && (\n                <Flashcard \n                    {...word} \n                    isFlipped={isFlipped} \n                    handleFlip={handleFlip} \n                    backgroundColor={backgroundColor}\n                />\n            )}\n\n            <div className=\"button-container\">\n            <Button \n                    variant=\"contained\" \n                    style={{ backgroundColor: '#F17300', color: 'white' }} \n                    onClick={() => handleNext(false,reviewRound,word)} \n                    className=\"nav-button\" \n                    disabled={filteredFlashcards.length === 0}\n                >\n                    <CloseIcon/>\n                </Button>\n                <Button \n                    variant=\"contained\" \n                    style={{ backgroundColor: '#81A4CD', color: 'white' }} \n                    onClick={()=>handleCopy(word.word)} \n                    className=\"nav-button\" \n                    disabled={filteredFlashcards.length === 0}\n                >\n                    <ContentCopyIcon/>\n                </Button>\n                <Button \n                    variant=\"contained\" \n                    style={{ backgroundColor: '#054A91', color: 'white' }} \n                    onClick={() => handleNext(true,reviewRound,word)} \n                    className=\"nav-button\" \n                    disabled={filteredFlashcards.length === 0}\n                >\n                    <CheckIcon/>\n                </Button>\n            </div>\n            <Snackbar open={snackbarOpen} autoHideDuration={2000} onClose={() => setSnackbarOpen(false)}>\n                <Alert onClose={() => setSnackbarOpen(false)} severity=\"success\" sx={{ width: '100%' }}>\n                    Copied to clipboard!\n                </Alert>\n            </Snackbar>\n        </Container>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}